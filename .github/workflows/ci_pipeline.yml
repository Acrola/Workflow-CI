name: CI/CD MLflow Pipeline - Auto Retrain & Deploy

on:
  push:
    branches:
      - main # Trigger on pushes to the main branch
  workflow_dispatch: # Can also manually trigger from GitHub UI

env:
  # --- MLflow Configuration ---
  MLFLOW_TRACKING_URI: ${{ secrets.MLFLOW_TRACKING_URI }}
  MLFLOW_TRACKING_USERNAME: ${{ secrets.MLFLOW_USERNAME }}
  MLFLOW_TRACKING_PASSWORD: ${{ secrets.MLFLOW_PASSWORD }}

  # --- Docker Hub Configuration ---
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  DOCKER_REPO: acrola/proyek_sml_kenny

jobs:
  train-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13.3'

      - name: Install Conda (if not already installed on runner)
        uses: conda-incubator/setup-miniconda@v3
        with:
          auto-update-conda: true
          python-version: 3.13.3

      - name: Install Project Dependencies
        # This will create a conda environment from MLProject/conda.yaml
        run: |
          conda env create -f MLProject/conda.yaml
          # Activate the environment name from conda.yaml
          source $(conda info --base)/etc/profile.d/conda.sh
          conda activate $(grep '^name:' MLProject/conda.yaml | cut -d' ' -f2) # Dynamically get env name

      - name: Log in to MLflow Tracking Server (DagsHub)
        run: |
          echo "Logging into MLflow tracking server: $MLFLOW_TRACKING_URI"
          
      - name: Run MLflow Project (Automatic Retraining)
        id: run_mlflow_project # Store output from this step
        working-directory: MLProject # Run from the MLProject directory
        run: |
          source $(conda info --base)/etc/profile.d/conda.sh
          conda activate $(grep '^name:' conda.yaml | cut -d' ' -f2)

          # Execute the MLflow Project's 'main' entry point.
          # This will run the `if __name__ == "__main__":` block in modelling.py.

          echo "Newly created MLflow Run ID from CI retraining: $MLFLOW_RUN_ID"
          echo "retrained_model_run_id=$MLFLOW_RUN_ID" >> $GITHUB_OUTPUT # Make it available to subsequent steps

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.DOCKER_PASSWORD }}

      - name: Build and Push Docker Image for Newly Retrained Model
        run: |
          # The mlflow models build-docker command uses the run ID of the model
          # that was just created in the "Run MLflow Project" step.
          MODEL_URI="runs:/${{ steps.run_mlflow_project.outputs.retrained_model_run_id }}/model"
          echo "Building Docker image for model URI: $MODEL_URI"

          mlflow models build-docker --model-uri "$MODEL_URI" --name "${{ env.DOCKER_REPO }}" --tag latest
