name: CI/CD MLflow Pipeline - Auto Retrain & Deploy

on:
  push:
    branches:
      - main
      - test
  workflow_dispatch:

env:
  MLFLOW_TRACKING_URI: ${{ secrets.MLFLOW_TRACKING_URI }}
  MLFLOW_TRACKING_USERNAME: ${{ secrets.MLFLOW_TRACKING_USERNAME }}
  MLFLOW_TRACKING_PASSWORD: ${{ secrets.MLFLOW_TRACKING_PASSWORD }}
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  DOCKER_REPO: acrola/proyek_sml_kenny

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Setup Conda Environment
        uses: conda-incubator/setup-miniconda@v3
        with:
          auto-update-conda: true
          python-version: '3.12'
          auto-activate-base: false

      - name: Check Env
        run: |
          echo "Current Working Directory: $(pwd)"
          source $(conda info --base)/etc/profile.d/conda.sh
          conda --version
          python --version

      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y git-lfs

      - name: Create Conda Environment
        working-directory: MLProject
        run: |
          source $(conda info --base)/etc/profile.d/conda.sh
          conda env create -f conda.yaml || conda env update -f conda.yaml

      - name: Install Python dependencies
        working-directory: MLProject
        run: |
          source $(conda info --base)/etc/profile.d/conda.sh
          conda activate mlflow-env
          pip install -r requirements.txt

      - name: Run mlflow project
        id: run_mlflow_project
        working-directory: MLProject
        run: |
          source $(conda info --base)/etc/profile.d/conda.sh
          conda activate mlflow-env
          echo "Running MLflow training script (modelling.py) to create a new model..."
          python modelling.py | grep -oE '[a-f0-9]{32}' | head -n 1 > run_id.txt

      - name: Get latest MLflow run_id
        id: get_model_run_id_for_deploy
        working-directory: MLProject
        run: |
          RUN_ID=$(cat run_id.txt)
          echo "Latest MLflow Run ID: $RUN_ID" >&2

      - name: Download MLflow Artifacts
        working-directory: MLProject
        env:
          LOCAL_LFS_ARTIFACTS_DIR_ENV: mlflow_artifacts_for_lfs
          MLFLOW_TRACKING_URI: ${{ secrets.MLFLOW_TRACKING_URI }}
          MLFLOW_TRACKING_USERNAME: ${{ secrets.MLFLOW_TRACKING_USERNAME }}
          MLFLOW_TRACKING_PASSWORD: ${{ secrets.MLFLOW_TRACKING_PASSWORD }}
        run: |
          RUN_ID=$(cat run_id.txt)
          export RUN_ID
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          git lfs install --local 
          rm -rf "$LOCAL_LFS_ARTIFACTS_DIR_ENV"
          mkdir -p "$LOCAL_LFS_ARTIFACTS_DIR_ENV"
          source $(conda info --base)/etc/profile.d/conda.sh
          conda activate mlflow-env
          export MLFLOW_TRACKING_URI
          export MLFLOW_TRACKING_USERNAME
          export MLFLOW_TRACKING_PASSWORD
          python <<EOF
          import mlflow.artifacts
          import os

          run_id = os.environ['RUN_ID']
          local_artifacts_dir = os.environ['LOCAL_LFS_ARTIFACTS_DIR_ENV']
          mlflow.artifacts.download_artifacts(
              artifact_uri=f"runs:/{run_id}/artifacts",
              dst_path=local_artifacts_dir
          )
          print(f"All artifacts downloaded successfully to {local_artifacts_dir}")
          EOF

      - name: Upload to GitHub LFS
        working-directory: MLProject
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          LOCAL_LFS_ARTIFACTS_DIR="mlflow_artifacts_for_lfs"
          git lfs track "${LOCAL_LFS_ARTIFACTS_DIR}/**"
          git add .gitattributes || true 
          git add "${LOCAL_LFS_ARTIFACTS_DIR}/"
          git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git
          if ! git diff-index --quiet HEAD; then
            git commit -m "chore: Add/update all MLflow artifacts from CI run ${{ github.run_id }}"
            git push origin HEAD:${{ github.ref }}
            echo "Successfully pushed all MLflow artifacts to GitHub LFS."
          else
            echo "No new MLflow artifact changes to commit to GitHub LFS."
          fi

      - name: Build Docker Model
        working-directory: MLProject
        run: |
          RUN_ID=$(cat run_id.txt)
          source $(conda info --base)/etc/profile.d/conda.sh
          conda activate mlflow-env
          mlflow models build-docker \
            --model-uri "runs:/$RUN_ID/model" \
            --name "$DOCKER_REPO" \
            --enable-mlserver

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login --username "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Tag Docker Image
        run: echo "Image built and tagged as $DOCKER_REPO:latest"

      - name: Push Docker Image
        run: docker push "$DOCKER_REPO":latest
