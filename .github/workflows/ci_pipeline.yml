name: CI/CD MLflow Pipeline - Auto Retrain & Deploy

on:
  push:
    branches:
      - main # Trigger on pushes to the main branch
  workflow_dispatch: # Can also manually trigger from GitHub UI

env:
  # --- MLflow Configuration ---
  MLFLOW_TRACKING_URI: ${{ secrets.MLFLOW_TRACKING_URI }}
  MLFLOW_TRACKING_USERNAME: ${{ secrets.MLFLOW_USERNAME }}
  MLFLOW_TRACKING_PASSWORD: ${{ secrets.MLFLOW_PASSWORD }}

  # --- Docker Hub Configuration ---
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  DOCKER_REPO: acrola/proyek_sml_kenny

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest # Use the latest Ubuntu runner

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4 # Action to check out your repository code

      - name: Setup Conda Environment
        uses: conda-incubator/setup-miniconda@v3 # Action to set up Miniconda
        with:
          auto-update-conda: true
          python-version: '3.12' # Ensure this matches your conda.yaml
          auto-activate-base: false # Do not auto-activate base env to avoid conflicts

      - name: Install Project Dependencies and Run MLflow Project
        id: run_mlflow_project
        working-directory: MLProject # Set the working directory for this entire step
        run: |
          # Create the conda environment from the yaml file
          conda env create -f conda.yaml || true

          # Initialize conda for the current shell session
          source $(conda info --base)/etc/profile.d/conda.sh

          # Activate the specific environment defined in conda.yaml
          conda activate mlflow-env

          # Run MLflow project within the activated environment
          MLFLOW_RUN_ID=$(mlflow run . --no-tracking-uri --experiment-name "Diabetes_Prediction_CI_Retraining" | tail -n 1 | grep -oP '(?<=run_id=)[a-f0-9]+')
          echo "Newly created MLflow Run ID from CI retraining: $MLFLOW_RUN_ID"

          # Set an output variable named 'retrained_model_run_id'
          echo "retrained_model_run_id=$MLFLOW_RUN_ID" >> $GITHUB_OUTPUT

      - name: Build and Push Docker Image
        working-directory: MLProject # Ensure working directory is correct for Dockerfile context
        run: |
          # Login to Docker Hub using the secrets
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login --username "${{ secrets.DOCKER_USERNAME }}" --password-stdin

          # Build the Docker image using the MLflow run ID obtained from the previous step
          # The --model-uri "runs:/<run_id>/model" tells MLflow which model artifact to package
          mlflow models build-docker \
            --model-uri "runs:/${{ steps.run_mlflow_project.outputs.retrained_model_run_id }}/model" \
            --name "$DOCKER_REPO" \
            --enable-mlserver # This option includes MLflow's MLServer deployment components

          # Push the built Docker image to Docker Hub
          docker push "$DOCKER_REPO":latest # Pushes the image tagged as 'latest' (you can use specific tags if you implement versioning)
